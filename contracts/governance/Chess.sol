// SPDX-License-Identifier: MIT
pragma solidity >=0.6.10 <0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";

import "../interfaces/IChess.sol";
import "../utils/CoreUtility.sol";

import "./ChessRoles.sol";

contract Chess is IChess, Ownable, ERC20, ChessRoles, CoreUtility {
    using SafeMath for uint256;

    /// @dev Hard-coded cumulative weekly supply. Please refer to the whitepaper for details.
    ///      Below are the concrete numbers in this list, which are also tested in "test/chess.ts".
    ///
    ///      ```
    ///      180000000 180300000 180900000 181800000 183000000 185400000 187704000 189915840 192039206 194077638
    ///      196034532 197913151 199716625 201447960 203110041 204705640 206237414 207707917 209119601 210474817
    ///      211775824 213037801 214261919 215449313 216601086 217718305 218802007 219853199 220872855 221861921
    ///      222821315 223751928 224654622 225530235 226379580 227203444 228002592 228777766 229529685 230259047
    ///      230966527 231659858 232339322 233005197 233657754 234297261 234923977 235538159 236140057 236729917
    ///      237307980 237874482 238429653 238973722 239506909 240029432 240541504 241043336 241535130 242017089
    ///      242489409 242957005 243419925 243878217 244331925 244781096 245225776 245666008 246101839 246533311
    ///      246960468 247383354 247802011 248216481 248626807 249033029 249435189 249833328 250227485 250617701
    ///      251004014 251390328 251776641 252162954 252549268 252935581 253321895 253708208 254094522 254480835
    ///      254867149 255253462 255639776 256026089 256412402 256798716 257185029 257571343 257957656 258343970
    ///      258730283 259116597 259502910 259889223 260275537 260661850 261048164 261434477 261820791 262207104
    ///      262593418 262979731 263366045 263752358 264138671 264524985 264911298 265297612 265683925 266070239
    ///      266456552 266842866 267229179 267615492 268001806 268388119 268774433 269160746 269547060 269933373
    ///      270319687 270706000 271092314 271478627 271864940 272251254 272637567 273023881 273410194 273796508
    ///      274182821 274569135 274955448 275341761 275728075 276114388 276500702 276887015 277273329 277659642
    ///      278045956 278432269 278818583 279204896 279591209 279977523 280363836 280750150 281136463 281522777
    ///      281909090 282295404 282681717 283068030 283454344 283840657 284226971 284613284 284999598 285385911
    ///      285772225 286158538 286544852 286931165 287317478 287703792 288090105 288476419 288862732 289249046
    ///      289635359 290021673 290407986 290794299 291180613 291566926 291953240 292339553 292725867 293112180
    ///      293498494 293884807 294271120 294657434 295043747 295430061 295816374 296202688 296589001 296975315
    ///      297361628 297747942 298134255 298520568 298906882 299293195 299679509 300000000
    ///      ```
    bytes private constant CUMULATIVE_SUPPLY_SCHEDULE =
        hex"";

    uint256 public immutable startTimestamp;

    constructor(uint256 startTimestamp_) public ERC20("Chess", "CHESS") ChessRoles() {
        require(startTimestamp_ > block.timestamp, "Start timestamp is not in future");
        require(
            endOfWeek(startTimestamp_ - 1) == startTimestamp_,
            "Start timestamp is not start of a trading week"
        );
        _mint(msg.sender, getCumulativeSupply(0));
        startTimestamp = startTimestamp_;
    }

    /// @notice Get length of the supply schedule
    /// @return The length of the supply schedule
    function getScheduleLength() public pure returns (uint256) {
        return CUMULATIVE_SUPPLY_SCHEDULE.length / 32;
    }

    /// @notice Get the cumulative supply at the given week index
    /// @param index Index for cumulative supply
    /// @return currentWeekCumulativeSupply The cumulative supply at the
    ///         beginning of the week
    function getCumulativeSupply(uint256 index)
        public
        pure
        returns (uint256 currentWeekCumulativeSupply)
    {
        (currentWeekCumulativeSupply, ) = getWeeklySupply(index);
    }

    /// @notice Get the total supply and weekly supply at the given week index
    /// @param index Index for weekly supply
    /// @return currentWeekCumulativeSupply The cumulative supply at the
    ///         beginning of the week
    /// @return weeklySupply Weekly supply
    function getWeeklySupply(uint256 index)
        public
        pure
        returns (uint256 currentWeekCumulativeSupply, uint256 weeklySupply)
    {
        uint256 length = getScheduleLength();
        bytes memory scheduleBytes = bytes(CUMULATIVE_SUPPLY_SCHEDULE);

        if (index < length - 1) {
            uint256 offset = (index + 1) * 32;
            uint256 nextWeekCumulativeSupply;
            assembly {
                currentWeekCumulativeSupply := mload(add(scheduleBytes, offset))
                nextWeekCumulativeSupply := mload(add(scheduleBytes, add(offset, 32)))
            }

            weeklySupply = nextWeekCumulativeSupply.sub(currentWeekCumulativeSupply);
        } else {
            uint256 offset = length * 32;
            assembly {
                currentWeekCumulativeSupply := mload(add(scheduleBytes, offset))
            }

            weeklySupply = 0;
        }
    }

    /// @notice Current number of tokens in existence (claimed or unclaimed)
    function availableSupply() public view returns (uint256) {
        if (block.timestamp < startTimestamp) {
            return getCumulativeSupply(0);
        }
        uint256 index = (block.timestamp - startTimestamp) / 1 weeks;
        uint256 currentWeek = index * 1 weeks + startTimestamp;
        (uint256 currentWeekCumulativeSupply, uint256 weeklySupply) = getWeeklySupply(index);
        return
            currentWeekCumulativeSupply.add(
                weeklySupply.mul(block.timestamp - currentWeek).div(1 weeks)
            );
    }

    /// @notice Get the release rate of CHESS token at the given timestamp
    /// @param timestamp Timestamp for release rate
    /// @return Release rate (number of CHESS token per second)
    function getRate(uint256 timestamp) external view override returns (uint256) {
        if (timestamp < startTimestamp) {
            return 0;
        }
        uint256 index = (timestamp - startTimestamp) / 1 weeks;
        (, uint256 weeklySupply) = getWeeklySupply(index);
        return weeklySupply.div(1 weeks);
    }

    /// @notice Creates `amount` CHESS tokens and assigns them to `account`,
    ///         increasing the total supply. This is guarded by `Minter` role.
    /// @param account recipient of the token
    /// @param amount amount of the token
    function mint(address account, uint256 amount) external override onlyMinter {
        require(totalSupply().add(amount) <= availableSupply(), "Exceeds allowable mint amount");
        _mint(account, amount);
    }

    function addMinter(address account) external override onlyOwner {
        _addMinter(account);
    }

    function removeMinter(address account) external onlyOwner {
        _removeMinter(account);
    }
}
